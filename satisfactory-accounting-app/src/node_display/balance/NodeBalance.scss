@use "sass:color";
@use "../..//colors.scss";

.NodeBalance {
    box-sizing: border-box;
    display: grid;
    align-items: center;

    .entry-row {
        box-sizing: border-box;
        cursor: pointer;
        align-items: center;

        &.ClickEdit {
            cursor: text;
        }
    }

    &.vertical {
        grid-template-columns: [icon] min-content [qty] minmax(3em, auto);

        border-radius: 5px;
        background-color: colors.$light;
        padding: 5px;
        row-gap: 5px;

        .item-entries {
            display: grid;
            grid-template-columns: subgrid;
            grid-column: icon / span 2;
            row-gap: inherit;

            &:empty {
                display: none;
            }
        }

        .entry-row {
            display: grid;
            grid-template-columns: subgrid;
            grid-column: icon / span 2;
            column-gap: 5px;
            align-items: center;
        }

        .Icon {
            grid-column: icon;
        }

        .balance-value {
            grid-column: qty;
        }
    }

    &.horizontal {
        grid-template-columns: subgrid;
        grid-column: balance-negative / span 4;

        column-gap: 10px;

        .item-entries {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: flex-end;
            column-gap: inherit;

            &.positive {
                grid-column: balance-positive;
                grid-row: 1;
            }

            &.neutral {
                grid-column: balance-neutral;
                grid-row: 1;
            }

            &.negative {
                grid-column: balance-negative;
                grid-row: 1;
            }

            &:empty {
                display: none;
            }
        }

        .entry-row {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            gap: 5px;

            &.power-entry {
                grid-column: balance-power;
                grid-row: 1;
                justify-self: stretch;
            }
        }
    }

    .balance-value,
    .value-display,
    .value-input {
        text-align: right;
    }

    .negative {

        .balance-value,
        .value-display {
            color: colors.$danger;
        }
    }

    .positive {

        .balance-value,
        .value-display {
            color: color.scale(colors.$success, $lightness: -30%);
        }
    }
}

.hide-empty-balances .NodeBalance {

    .item-entries.hideable-neutral {
        display: none;
    }

    // Don't catch the power in this.
    .item-entries .entry-row.hideable-neutral {
        display: none;
    }
}
